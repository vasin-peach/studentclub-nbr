stages:
  - build
  - deploy

image: docker:latest

before_script:
  - docker login registry.gitlab.com --username $GITLAB_USER --password $GITLAB_PASS

build:
  stage: build
  services:
    - docker:dind
  script:
    - docker build -t registry.gitlab.com/shinasaki/studentclub-nbr .
    - docker push registry.gitlab.com/shinasaki/studentclub-nbr
  after_script:
    - docker rmi registry.gitlab.com/shinasaki/studentclub-nbr
  only:
    - master

staging-deploy:
  stage: deploy
  services:
    - docker:dind
  before_script:
    - apk add --no-cache py-pip
    - pip install docker-compose
  script: 
    - "docker-compose -f .cdconfig/docker-compose.staging.yml pull"
    - "docker-compose -f .cdconfig/docker-compose.staging.yml stop"
    - "docker-compose -f .cdconfig/docker-compose.staging.yml rm --force"
    - "docker-compose -f .cdconfig/docker-compose.staging.yml up -d"
  after_script:
    - docker logout registry.gitlab.com
    
  environment:
    name: staging
    url: http://$APPS_DOMAIN
  only:
    - master

production-deploy:
  stage: deploy
  before_script:
    - apk add --no-cache py-pip
    - pip install docker-compose
  script: 
    - "docker-compose -f .cdconfig/docker-compose.prod.yml pull"
    - "docker-compose -f .cdconfig/docker-compose.prod.yml stop"
    - "docker-compose -f .cdconfig/docker-compose.prod.yml rm --force"
    - "docker-compose -f .cdconfig/docker-compose.prod.yml up -d"
  after_script:
    - docker logout registry.gitlab.com
  environment:
    name: staging
    url: http://$APPS_DOMAIN
  only:
    - master
  when: manual